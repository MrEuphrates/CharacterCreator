USE THIS DOCUMENT TO RECORD WHAT YOU LAST DID AND WHERE YOU LEFT OFF RE: WHAT YOU WANT TO DO

10/30/17 REH
I had to redo the stuff I did on Saturday because it was lost when I reverted to the wrong commit.  I don't think the XmlSerializer will work, partially because it doesn't store private fields
in the class.  So either I need to look to another formatter (BinaryFormatter or SoapFormatter), or else write something from scratch.  It seems Soap is meant to use the HTTP protocol, so I'll
look into BinaryFormatter.

I fell back on XmlSerializer for simplicity.  I have a rudimentary test functional, where I can save and load stats and abilities.  It needs formal testing, but the problem I want to work on
next is working around having to have an XmlInclude attribute for every single special rule and special rule variable inheritor.  Turns out no, there is no way to get the derived types automatically.
I have to specify them each explicitly.

I implemented the XmlInclude attribute for every special rule and variable type.  Now I need to test serializing and deserializing every single special rule to make sure it works.

I made the special rules and variables classes public, since they have to be, and I added parameterless constructors to the classes that needed them, since they're also required.  I successfully
tested serializing again.  Now I have to test for every rule.

Armor Buster is causing a StackOverflowException that, despite being in a try-catch block, isn't being handled.  The exception occurs during serialization.  I tried it with Blast, too, and the same
thing happens.

Acid still works fine, though.  Blind worked, too.  Blast and Armor Buster didn’t.  Why?  So far, the common point seems to be with rules that have incompatible rules.  I did more testing and that 
certainly appears to be the case.  So perhaps I need to change how I handle incompatible rules, anyway.  Maybe I’ll just make it a list of strings but it takes the name?  Maybe make the Name property
 static?

The list of incompatible rules shouldn’t be bound to an instance anyway.  Perhaps special rules should know whether or not something is incompatible based on a parameter instead?  I adjusted the way 
I check for compatibility, giving SpecialRule a method called IsCompatibleWith, accepting a List of special rules and check for each one’s presence in the list of incompatible rules.  I then made the
 IncompatibleRules property Protected, which should remove it from serialization (it’s not instance-related, anyway).  I tested compatibility checking briefly and it still works, which should apply 
 across all the rules.  Now to test serialization of rules with incompatible rules again.  It worked!

I finished testing serializing all of the special rules successfully.  The save/load feature needs fleshing out in a major way, but I worked on it now to facilitate testing and developing the other
features of the program.  So for now, I'll focus on causing it to load the character into the form.

I'm modifying my next task.  I want to bind the objects to their respective forms, so that fields update automatically to the class (and vice versa), rather than having to programmatically instruct
the form when to save what to where.

I implemented an extremely rudimentary data binding for the character form, just to get started with.  I successfully bound the Name property to the txtName.Text control property.  I need to
implement INotifyPropertyChanged, I believe, if it is going to automatically update the form when the property 
changes (see https://stackoverflow.com/questions/12034840/handling-onpropertychanged#12035115 
and https://stackoverflow.com/questions/1315621/implementing-inotifypropertychanged-does-a-better-way-exist), but does the property change when I update the text box?  It does save it,
but when I load the form, nothing changes (might be where INotifyPropertyChanged comes in, not sure).  Probably work on that next.


10/28/17 REH
Abilities are now saving to the character sheet and sorting into the appropriate list boxes. Next I need to allow users to edit existing abilities, make sure they
are resorted appropriately, and I need to work on saving and loading characters (which will aid in my testing, too).

10/27/17 REH
Left off with abilities evaluating bonus damage based on the special rules, tying the ability to the appropriate stat.

10/26/17 REH
Added output of the syntax to the ability form.  Modified to update and display the ability with the "requires input" feature, flagging and labeling abilities that will require more input from me.
Not sure what to work on next.  Ability form might be done, may be time to have it pulled back to the character sheet.

10/25/17
When I left off about 220pm, I decided that I need to rework energy calc in this tool, because I implemented it using percentages of the base damage, but really, I should be using the rules as written,
and therefore using energy modifiers instead.  So I need to implement that, including a display on the Ability form so the user knows what the modifier is, currently.

10/24/17
When I left off with this, I had finished testing rule validation on SpecialForm.  I think updating the Ability and passing it back to the Ability is next, followed by
adding more rules to an ability which already has some, and editing and deleting existing rules, too.

10/23/17
When I finished this night, I had implemented incompatability methods and properties for the special rules and made them appear on the information form; however, 
I have barely tested any of them.